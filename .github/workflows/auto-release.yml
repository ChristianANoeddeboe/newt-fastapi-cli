name: Auto Release on Version Bump

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  auto-release:
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.title, 'ðŸš€ Release v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install

      - name: Get version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(poetry version -s)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Check if tag already exists
        id: check_tag
        run: |
          if git tag --list | grep -q "^v${{ steps.get_version.outputs.version }}$"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag v${{ steps.get_version.outputs.version }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag v${{ steps.get_version.outputs.version }} does not exist"
          fi

      - name: Create and push tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag "v${{ steps.get_version.outputs.version }}"
          git push origin "v${{ steps.get_version.outputs.version }}"

      - name: Test CLI functionality
        run: |
          poetry run newt --help
          poetry run newt -v

      - name: Build package
        run: poetry build

      - name: Extract release notes from PR
        id: extract_notes
        run: |
          # Extract release notes from the PR body
          RELEASE_NOTES=$(echo '${{ github.event.pull_request.body }}' | sed -n '/### Release Notes/,/###/p' | sed '1d;$d' | sed '/^$/d')

          if [ -z "$RELEASE_NOTES" ]; then
            RELEASE_NOTES="## Changes in v${{ steps.get_version.outputs.version }}

          This release was automatically created from PR #${{ github.event.pull_request.number }}.

          ### Installation
          \`\`\`bash
          pip install newt==${{ steps.get_version.outputs.version }}
          \`\`\`

          ### What's Changed
          - Version bumped to ${{ steps.get_version.outputs.version }}
          - See PR #${{ github.event.pull_request.number }} for details

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.get_version.outputs.version }}...HEAD"
          fi

          # Save multiline output
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release with Assets
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          body: ${{ steps.extract_notes.outputs.notes }}
          draft: false
          prerelease: false
          artifacts: |
            ./dist/newt-${{ steps.get_version.outputs.version }}-py3-none-any.whl
            ./dist/newt-${{ steps.get_version.outputs.version }}.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ github.event.pull_request.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸŽ‰ **Release Created!** \n\nâœ… Release [v${{ steps.get_version.outputs.version }}](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.get_version.outputs.version }}) has been automatically created and published!\n\nðŸ“¦ **Installation:**\n```bash\npip install newt==${{ steps.get_version.outputs.version }}\n```'
            })
