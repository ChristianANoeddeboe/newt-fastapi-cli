name: Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: "Release notes (optional)"
        required: false
        default: ""

jobs:
  bump-version-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install

      #   - name: Run tests
      #     run: |
      #       poetry run pytest --verbose

      - name: Test CLI functionality
        run: |
          poetry run newt --help
          poetry run newt -v

      - name: Bump version
        id: bump_version
        run: |
          # Bump version using poetry
          poetry version ${{ github.event.inputs.version_bump }}
          NEW_VERSION=$(poetry version -s)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Bumped version to: $NEW_VERSION"

      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml
          git commit -m "Bump version to ${{ steps.bump_version.outputs.new_version }}"
          git tag "v${{ steps.bump_version.outputs.new_version }}"

      - name: Push changes
        run: |
          git push origin main
          git push origin "v${{ steps.bump_version.outputs.new_version }}"

      - name: Build package
        run: poetry build

      - name: Create Release Notes
        id: release_notes
        run: |
          RELEASE_NOTES="${{ github.event.inputs.release_notes }}"
          if [ -z "$RELEASE_NOTES" ]; then
            RELEASE_NOTES="## Changes in v${{ steps.bump_version.outputs.new_version }}

          This release was automatically created with a ${{ github.event.inputs.version_bump }} version bump.

          ### Installation
          \`\`\`bash
          pip install newt==${{ steps.bump_version.outputs.new_version }}
          \`\`\`

          ### What's Changed
          - Version bumped from previous release
          - See commit history for detailed changes"
          fi
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.bump_version.outputs.new_version }}
          release_name: Release v${{ steps.bump_version.outputs.new_version }}
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: false

      - name: Upload wheel to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/newt-${{ steps.bump_version.outputs.new_version }}-py3-none-any.whl
          asset_name: newt-${{ steps.bump_version.outputs.new_version }}-py3-none-any.whl
          asset_content_type: application/x-wheel+zip

      - name: Upload source distribution to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/newt-${{ steps.bump_version.outputs.new_version }}.tar.gz
          asset_name: newt-${{ steps.bump_version.outputs.new_version }}.tar.gz
          asset_content_type: application/gzip
